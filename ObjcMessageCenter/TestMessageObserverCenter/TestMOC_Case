1. 测试添加消息(在ViewB添加修改文本的消息观察者->ViewA发送修改文本消息->ViewB接受到消息,修改文本);
2. 测试添加多个消息到一个观察者(执行1,在ViewB添加修改字体的消息观察者->ViewA发送修改字体消息->ViewB接受到消息,修改字体);
3. 测试添加一个消息到多个观察者(执行1,在VC_A中添加修改文本的消息观察->ViewA发送修改消息文本->VC_A接受到消息,修改文本到标题)
4. 测试移除观察者对所有消息的观察(执行2,得到预期结果->从ViewB移除观察者->ViewA发送修改文本的消息->ViewB接受不到消息->ViewA发送修改字体的消息->ViewB接受不到消息);
5. 测试移除观察者对指定消息的观察(执行2,得到预期结果->从ViewB移除对修改文本的消息观察->ViewA发送修改文本的消息->ViewB接受不到消息->从ViewA发送修改字体的消息->ViewB接受到消息,修改文本字体大小);
6. 测试添加消息块(在ViewB添加修改文本的消息块->ViewA发送修改文本消息->ViewB接受到消息,修改文本);
7. 测试添加多个消息块到一个观察者(执行6,在ViewB添加修改字体的消息块->ViewA发送修改字体消息->ViewB接受到消息,修改字体);
8. 测试添加一个消息块到多个观察者(执行6,在VC_A中添加修改标题的消息块->ViewA发送修改文本消息->VC_A接受到消息,修改标题)
9. 测试移除观察者对所有消息的观察(执行7,得到预期结果->从ViewB移除观察者->ViewA发送修改文本的消息->ViewB接受不到消息->ViewA发送修改字体的消息->ViewB接受不到消息);
10. 测试移除观察者对指定消息的观察(执行7,得到预期结果->从ViewB移除对修改文本的消息观察->ViewA发送修改文本的消息->ViewB接受不到消息->从ViewA发送修改字体的消息->ViewB接受到消息,修改字体);
11. 测试不同对象使用消息方法和消息块同时观察同一消息(执行1,在VC_A中添加修改文本的消息块->ViewA发送修改消息文本->VC_A接受到消息,修改文本到标题)
12. 测试同一对象使用消息方法和消息块同时观察同一消息(执行1,在ViewB添加修改文本的消息块->ViewA发送修改文本消息->ViewB接受到消息,修改文本)(注:需进行代码调试,看两段代码是否都有执行;或者两段代码执行不一样的操作=>所以实际情况中不建议这样同时使用)
13. 测试移除观察者(执行11,得到预期结果->从ViewB移除观察者->ViewA发送修改文本的消息->ViewB接受不到消息->VC_A接受到消息,修改文本到标题);
14. 测试移除观察者(执行12,得到预期结果->从ViewB移除观察者->ViewA发送修改文本的消息->ViewB接受不到消息)(注:需进行代码调试,看两段代码是否都没有执行);
15. 测试对同一消息同一观察者添加两个不同观察方法(两个方法都执行);
16. 测试对同一消息同一观察者添加两个相同观察方法(只执行一次);
17. 测试对同一消息同一观察者添加两个不同的执行块(定义两个块,但代码相同,两个块都执行);
18. 测试对同一消息同一观察者添加两个相同的执行块(定义一个块,添加两次,只执行一次);
19. 测试添加没有参数的观察方法(上面都是有参数的)
